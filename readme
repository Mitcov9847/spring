Отчёт о проделанной работе
Введение
В рамках данного проекта было разработано приложение для управления библиотекой с использованием Spring Boot, JPA и PostgreSQL. Основной задачей было создание REST API, которое позволяет выполнять операции CRUD (создание, чтение, обновление, удаление) с данными о книгах, авторах, издателях и категориях. Также были настроены связи между сущностями и интеграция с базой данных PostgreSQL.

Описание проекта
Проект состоит из нескольких взаимосвязанных сущностей:

Author (Автор) - информация об авторах книг.
Publisher (Издатель) - информация об издателях книг.
Book (Книга) - информация о книгах, включая название, год издания и связанного автора и издателя.
Category (Категория) - категория книги (например, "Фантастика", "Научная литература").
Library (Библиотека) - данные о библиотеке, которая может содержать несколько книг.
Каждая из сущностей представлена как класс с использованием аннотаций JPA, что позволяет автоматически маппить данные в таблицы базы данных.

Стек технологий
Для реализации проекта были использованы следующие технологии:

Spring Boot - для создания REST API и реализации бизнес-логики.
JPA (Java Persistence API) - для работы с базой данных и осуществления операций CRUD.
PostgreSQL - в качестве базы данных для хранения данных о книгах, авторах и других сущностях.
Maven - для управления зависимостями и сборки проекта.
Spring Data JPA - для удобного взаимодействия с базой данных через репозитории.
Этапы разработки

1. Инициализация проекта
На первом этапе был создан проект с использованием Spring Boot, а также настроен Maven для управления зависимостями. Были добавлены необходимые зависимости для работы с JPA и PostgreSQL.

2. Разработка сущностей
На втором этапе были созданы сущности для хранения данных о книгах, авторах, издателях и категориях. Для каждой сущности был создан класс с аннотациями JPA, описывающими поля и связи между таблицами.

3. Создание репозиториев
Для каждой сущности были созданы интерфейсы репозиториев, которые расширяют JpaRepository. Это обеспечило простоту работы с базой данных и автоматическое выполнение стандартных операций CRUD.

4. Разработка контроллеров
Затем были разработаны контроллеры, которые реализуют REST API для взаимодействия с пользователями. Каждый контроллер поддерживает различные HTTP-запросы (GET, POST, PUT, DELETE) для работы с данными о книгах, авторах и других сущностях.

5. Тестирование
После реализации всех основных функциональных блоков было проведено тестирование API с использованием Postman для проверки корректности работы всех эндпоинтов.

6. Интеграция с PostgreSQL
Для хранения данных была настроена база данных PostgreSQL. Все сущности были связаны с таблицами в базе данных с помощью JPA. Конфигурация подключения к базе данных была настроена через файл application.properties.

Результат
В результате работы был создан полностью функциональный проект с REST API, который позволяет выполнять операции CRUD для сущностей библиотеки. Проект готов к использованию для управления данными о книгах, авторах, издателях и категориях.

Заключение
Проект показал хорошие результаты и продемонстрировал возможности Spring Boot и JPA для быстрого создания веб-приложений. Использование PostgreSQL обеспечило надёжное хранение данных, а Maven упростил управление зависимостями. В дальнейшем можно планировать расширение функционала, например, добавление возможности поиска книг по различным критериям или реализации авторизации пользователей.

